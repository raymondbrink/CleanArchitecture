//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// PLEASE DO NOT MODIFY!
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Example.Domain.Entities;

namespace Example.Persistence
{

    public partial class ExampleDbContext : DbContext
    {

        public ExampleDbContext() :
            base()
        {
            OnCreated();
        }

        public ExampleDbContext(DbContextOptions<ExampleDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=CleanArch;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Customer> Customers
        {
            get;
            set;
        }

        public virtual DbSet<Supplier> Suppliers
        {
            get;
            set;
        }

        public virtual DbSet<Store> Stores
        {
            get;
            set;
        }

        public virtual DbSet<Company> Companies
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.CustomerMapping(modelBuilder);
            this.CustomizeCustomerMapping(modelBuilder);

            this.SupplierMapping(modelBuilder);
            this.CustomizeSupplierMapping(modelBuilder);

            this.StoreMapping(modelBuilder);
            this.CustomizeStoreMapping(modelBuilder);

            this.CompanyMapping(modelBuilder);
            this.CustomizeCompanyMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Customer Mapping

        private void CustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().ToTable(@"Customers", @"dbo");
            modelBuilder.Entity<Customer>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Customer>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Customer>().Property(x => x.ArchivedAtUtc).HasColumnName(@"ArchivedAtUtc").ValueGeneratedNever();
            modelBuilder.Entity<Customer>().Property(x => x.ArchivedBy).HasColumnName(@"ArchivedBy").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Customer>().HasKey(@"Id");
        }

        partial void CustomizeCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region Supplier Mapping

        private void SupplierMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Supplier>().ToTable(@"Suppliers", @"dbo");
            modelBuilder.Entity<Supplier>().OwnsOne(t => t.Contact).Property(x => x.FamilyName).HasColumnName(@"ContactFamilyName").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Supplier>().OwnsOne(t => t.Contact).Property(x => x.GivenName).HasColumnName(@"ContactGivenName").ValueGeneratedNever().HasMaxLength(50);
        }

        partial void CustomizeSupplierMapping(ModelBuilder modelBuilder);

        #endregion

        #region Store Mapping

        private void StoreMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Store>().ToTable(@"Stores", @"dbo");
        }

        partial void CustomizeStoreMapping(ModelBuilder modelBuilder);

        #endregion

        #region Company Mapping

        private void CompanyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Company>().ToTable(@"Companies", @"dbo");
            modelBuilder.Entity<Company>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Company>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Company>().Property(x => x.CreatedAtUtc).HasColumnName(@"CreatedAtUtc").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Company>().HasKey(@"Id");
        }

        partial void CustomizeCompanyMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
